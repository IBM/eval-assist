{
    "name": "eval-assist",
    "private": false,
    "engines": {
        "node": ">20"
    },
    "scripts": {
        "prepare": ". backend/venv/bin/activate && cd backend && python3 -m pip install pre-commit && python3 -m pre_commit install",
        "install:backend": "npm run check:python && python3 -m venv backend/venv && . backend/venv/bin/activate && pip3 install --upgrade pip setuptools wheel && pip3 install -r backend/requirements.txt",
        "install:frontend": "cd frontend && npm install",
        "install": "concurrently --kill-others-on-fail \"npm run install:backend\" \"npm run install:frontend\"",
        "start:backend": ". backend/venv/bin/activate && python3 backend/run.py",
        "_start:frontend": "wait-on -t 120s http-get://$(echo $NEXT_PUBLIC_BACKEND_API_HOST | sed 's/^http:\\/\\///')/health && cd frontend && npm run dev",
        "start:frontend": "dotenv -e .env -- npm run _start:frontend",
        "start": "npm run prisma && concurrently \"npm run start:backend\" \"npm run start:frontend\"",
        "prisma:prepare:backend": "node shared/scripts/mergePrisma.js backend",
        "prisma:prepare:frontend": "node shared/scripts/mergePrisma.js frontend",
        "prisma:prepare": "concurrently \"npm run prisma:prepare:frontend\" \"npm run prisma:prepare:backend\"",
        "prisma:generate:backend": ". backend/venv/bin/activate && cd backend && python3 -m prisma generate",
        "prisma:generate:frontend": "cd frontend && npx prisma generate",
        "prisma:generate": "npm run prisma:generate:frontend && npm run prisma:generate:backend",
        "prisma:sync": ". backend/venv/bin/activate && python3 -m prisma migrate dev --name init --schema backend/prisma/schema.prisma",
        "prisma": "npm run prisma:prepare && npm run prisma:generate && npm run prisma:sync",
        "db": "cd shared/localdb/ && docker compose -f postgres.yml up -d",
        "pre-commit:backend": ". backend/venv/bin/activate && python3 -m pre_commit run --all-files",
        "pre-commit:frontend": "cd frontend && npm run pre-commit",
        "pre-commit": "concurrently \"npm run pre-commit:backend\" \"npm run pre-commit:frontend\"",
        "clean:frontend": "rimraf frontend/node_modules frontend/prisma/schema.prisma",
        "clean:backend": "rimraf backend/venv backend/prisma/schema.prisma ",
        "clean": "concurrently \"npm run clean:frontend\" \"npm run clean:backend\" && rimraf node_modules",
        "check:python": "python3 shared/scripts/check_python_version.py",
        "freeze-deps:backend": ". backend/venv/bin/activate && cd backend && python3 -m pip freeze > requirements.lock",
        "docker:build:backend": "npm run prisma:prepare:backend && cd backend && docker build -t eval-assist-backend .",
        "docker:build:frontend": "npm run prisma:prepare:frontend && cd frontend && docker build -t eval-assist-frontend ."
    },
    "devDependencies": {
        "concurrently": "^8.2.2",
        "dotenv-cli": "^8.0.0",
        "rimraf": "^6.0.1",
        "wait-on": "^8.0.2"
    },
    "dependencies": {
        "next": "^14.2.26"
    }
}
