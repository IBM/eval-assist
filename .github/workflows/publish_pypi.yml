name: Publish to pypi

on:
  push:
    tags:
      - "v*.*.*"
jobs:
  build_and_publish:
    runs-on: ubuntu-22.04
    # if: startsWith(github.ref, 'refs/tags/')
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.13]
        poetry-version: [2.1.2]
    steps:
      - uses: actions/checkout@v4

      - name: Write DATABASE_URL and FRONTEND_BUILD_FOLDER to .env
        working-directory: backend/evalassist
        run: |
          echo 'DATABASE_URL="file:sqlite.db"\nFRONTEND_BUILD_FOLDER="fe_build"' > .env
          ls -a

      # Node and frontend build
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22"

      - name: Install Next.js deps
        working-directory: frontend
        run: npm ci

      - name: Prisma generate frontend
        run: |
          npm run prisma:prepare:frontend
          cd frontend
          npx prisma generate

      - name: Build and export Next.js
        working-directory: frontend
        env:
          NEXT_OUTPUT_MODE: export
        run: |
          npm run build
          mv out ../backend/evalassist/fe_build

      # Python environment
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: |
          python -m pip install pipx
          pipx install poetry
          curl -sSL https://install.python-poetry.org | python3 -

      - run: poetry self add poetry-dynamic-versioning

      - name: Prisma generate backend
        env:
          DATABASE_URL: "file:sqlite.db"
        run: |
          npm run prisma:prepare:backend
          cd backend
          poetry remove prisma
          poetry add prisma
          poetry run prisma generate --schema=prisma/schema.prisma
          poetry run prisma migrate deploy

      - name: Install dependencies
        working-directory: backend
        run: |
          ls
          poetry install

      - name: Publish package
        working-directory: backend
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry config pypi-token.pypi "$PYPI_TOKEN"
          poetry publish --build

      #  run: |
      #     poetry config repositories.test-pypi https://test.pypi.org/legacy/
      #     poetry config pypi-token.test-pypi $TEST_PYPI_TOKEN
      #     poetry publish --build -r test-pypi
